from selenium.webdriver.chrome.webdriver import WebDriver
from django.test import LiveServerTestCase

from .models import Place

class TitleTest(LiveServerTestCase):

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()

    #checking travel wishlist 
    def test_title_shown_on_home_page(self):
        self.selenium.get(self.live_server_url)
        self.assertIn(self.selenium.title, 'Travel Wishlist')


class AddPlacesTests(LiveServerTestCase):

    fixtures = ['test_places']

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()
    
    def test_add_new_place(self):
        self.selenium.get(self.live_server_url)   # Load home page
        input_name = self.selenium.find_element_by_id('id_name') # find input text box. id was generated by Django forms
        input_name.send_keys('Denver')  # Enter place name 
        add_button = self.selenium.find_element_by_id('add-new-place') 
        # Find the add button
        add_button.click()      

        # Expect new element to appear on page. Is the text 'Denver'?
        denver = self.selenium.find_element_by_id('place-name-5')
        self.assertEqual('Denver', denver.text)

        # Another way to check for text on a page - more general
        self.assertIn('Denver', self.selenium.page_source)
        self.assertIn('Tokyo', self.selenium.page_source)
        self.assertIn('New York', self.selenium.page_source)

        # as well as checking the user interface, can check the database too
        
        denver_db = Place.objects.get(pk=5)
        self.assertEqual('Denver', denver_db.name)
        self.assertFalse(denver_db.visited)

